###############
#Packages
###############
library(sf)
library(fields)
library(mnormt)

#######################################################################################################################################
#Reading in Analysis Data
#######################################################################################################################################
setwd("C:/Users/jlw98/Desktop/Yale Research/Students/Saskia Comess/Project_2/Data_Applications/DHS-Madagascar/Data/MDGC81FL/MDGC81FL/")  
analysis<-read.csv("MDGC81FL.csv",  
                   header = TRUE)
set.seed(23209)
keep_set<-sample(c(1:nrow(analysis)), size = 302)
analysis<-analysis[keep_set,]

##############################################################################################################################
#Reading in Shapefile
##############################################################################################################################
setwd("C:/Users/jlw98/Desktop/Yale Research/Students/Saskia Comess/Project_2/Data_Applications/DHS-Madagascar/Data/MDGE81FL/")  
villages<-st_read('MDGE81FL.shp')   
villages<-villages[keep_set,]

#######################################################################################################################################
#Reading in Health Facilities Data
#######################################################################################################################################
setwd("C:/Users/jlw98/Desktop/Yale Research/Students/Saskia Comess/Project_2/Data_Applications/DHS-Madagascar/Data/Health_Facilities/")  
hfs<-read.csv("madagascar.csv",  
              header = TRUE)
hfs<-hfs[!duplicated(hfs[,1:2]),]  #Removing duplicate locations
hfs<-hfs[(hfs$amenity == "pharmacy"),]  #Pharmacies only

##################################################################################################
#Prepping Datasets
##################################################################################################
mean(analysis$DHSID == villages$DHSID)  #Sorted correctly?
hfs<-hfs[((is.na(hfs$X) == 0) & (is.na(hfs$Y) == 0)),]  #Removing those with missing long/lat

final_analysis<-data.frame(analysis$Malaria_Prevalence_2020,
                           #analysis$Aridity_2020,
                           #analysis$Day_Land_Surface_Temp_2020,
                           analysis$Diurnal_Temperature_Range_2020,
                           #analysis$Drought_Episodes,
                           analysis$Elevation,
                           analysis$Enhanced_Vegetation_Index_2020,
                           #analysis$Frost_Days_2020,
                           #analysis$Global_Human_Footprint, 
                           #analysis$Growing_Season_Length, 
                           #analysis$Irrigation,
                           #analysis$ITN_Coverage_2020,
                           #analysis$Land_Surface_Temperature_2020,
                           #analysis$Livestock_Cattle,
                           #analysis$Livestock_Chickens,
                           #analysis$Livestock_Goats,
                           #analysis$Livestock_Pigs,
                           #analysis$Livestock_Sheep,
                           #analysis$Maximum_Temperature_2020,
                           #analysis$Mean_Temperature_2020,
                           #analysis$Minimum_Temperature_2020,
                           #analysis$Nightlights_Composite,
                           #analysis$Night_Land_Surface_Temp_2020,
                           #analysis$PET_2020,
                           analysis$Precipitation_2020,
                           #analysis$Rainfall_2020,
                           analysis$UN_Population_Density_2020)#,
                           #analysis$Wet_Days_2020)
#final_analysis$analysis.Drought_Episodes[is.na(final_analysis$analysis.Drought_Episodes) == 1]<-0

delete_set<-c(1:nrow(final_analysis))[is.na(rowSums(final_analysis)) == 1]
final_analysis<-final_analysis[-delete_set,]
villages<-villages[-delete_set,]

n_ind<-nrow(final_analysis)
y<-log(final_analysis$analysis.Malaria_Prevalence_2020 + 1.00)
par(mfrow = c(2,2))
hist(y)

ind_locs<-cbind(villages$LONGNUM,
                villages$LATNUM)
ps_locs<-cbind(hfs$X,
               hfs$Y)
dists<-rdist(ind_locs,
             ps_locs)
hist(dists)

################################################################
#Finalizing Set of Predictors
################################################################
x<-cbind(final_analysis$analysis.Diurnal_Temperature_Range_2020,
         final_analysis$analysis.Enhanced_Vegetation_Index_2020,
         final_analysis$analysis.Elevation,
         final_analysis$analysis.Precipitation_2020,
         final_analysis$analysis.UN_Population_Density_2020)
corr<-cor(x)
corr[abs(corr) < 0.70]<-0.00
round(corr, 
      2)
x<-scale(x)
x<-cbind(1,
         x)

w<-cbind(final_analysis$analysis.Diurnal_Temperature_Range_2020,
         final_analysis$analysis.Enhanced_Vegetation_Index_2020,
         final_analysis$analysis.Elevation,
         final_analysis$analysis.Precipitation_2020,
         final_analysis$analysis.UN_Population_Density_2020)
corr<-cor(w)
corr[abs(corr) < 0.70]<-0.00
round(corr, 
      2)
w<-scale(w)
w<-cbind(1,
         w)

########################################################
#Final Settings for the Model
########################################################
metric<-"count"  #"IDW"; "count"

m<-100
radius_seq<-seq(min(dists),
                5.00,
                length.out = m)

model_exposure<-matrix(NA,
                       nrow = n_ind,
                       ncol = m)

if(metric == "IDW"){

  for(j in 1:m){
     
     temp<-as.numeric(dists <= radius_seq[j])*dists
     temp[temp == 0]<-NA
     model_exposure[,j]<-rowSums((1.00/temp), 
                                 na.rm = TRUE)
     
     }
  model_exposure<-model_exposure/1000.00

  }

if(metric == "count"){
  for(j in 1:m){
     model_exposure[,j]<-rowSums(dists <= radius_seq[j])
     }
  }
model_exposure<-model_exposure/1000.00

offset<-rep(0.00,
            times = n_ind)

###############################################################
#True Parameter Settings
###############################################################
w<-w[,c(1:2)]
gamma_true<-c(-0.20,  
              0.75)
sigma2_phi_true<-1.00
rho_phi_true<-0.10
spatial_cov<-sigma2_phi_true*exp(-rho_phi_true*rdist(ind_locs))
phi_true<-rmnorm(n = 1,
                 mean = 0.00, 
                 varcov = spatial_cov)
delta_star_trans_true<-w%*%gamma_true +
                       phi_true
delta_star_true<-1.00/(1.00 + exp(-delta_star_trans_true))
radius_pointer_true<-ceiling(delta_star_true*m)
radius_pointer_true[radius_pointer_true < 1]<-1
radius_pointer_true[radius_pointer_true > m]<-m
radius_true<-radius_seq[radius_pointer_true]
true_exposure<-rep(NA,
                   times = n_ind)
for(j in 1:n_ind){
   true_exposure[j]<-sum(dists[j,] <= radius_true[j])
   }
true_exposure<-true_exposure/1000.00

x<-x[,c(1:2)]
beta_true<-c(mean(y),  
             0.10)
theta_keep_true<- -0.50
sigma2_epsilon_true<-var(y)
  
################################################
#Outcome
################################################
y<-rnorm(n = n_ind,
         mean = (offset +
                 x%*%beta_true +
                 true_exposure*theta_keep_true), 
         sd = sqrt(sigma2_epsilon_true))
y<-y - min(y)
hist(y)

n_grid<-100
grid_locs<-ind_locs[sample(c(1:n_ind), size = n_grid),]
full_dists<-rdist(rbind(ind_locs,
                        grid_locs))
diag(full_dists)<-0.00
full_dists<-full_dists/100.00

results<-SpBuffer(mcmc_samples = 10000,
                  y = y,
                  x = x,
                  radius_seq = radius_seq,
                  exposure = model_exposure,
                  w = w,
                  full_dists = full_dists,
                  metrop_var_rho_theta = 1.50^2,
                  metrop_var_gamma = rep(0.10^2, times = ncol(w)),
                  metrop_var_phi_star = rep(0.03^2, times = n_grid),
                  metrop_var_rho_phi = 0.50^2,
                  likelihood_indicator = 1)


